# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  before_all do |lane, options|
    @build_type = "debug"
    if not options.empty?
        @build_type = options["release"] ? "Release" : "Debug"
    end
  end

  desc "Assemble Build"
  lane :assemble_build do |options|
    gradle(task: "assemble", flavor: options[:build_flavor], build_type: options[:build_type])
  end

  desc "Assemble Test Application"
  lane :assemble_test_application do |options|
    gradle(task: "assemble", build_type: "AndroidTest")
  end

  desc "Run Unit Tests"
  lane :unit_tests do |options|
    gradle(task: "test", flavor: options[:build_flavor], build_type: options[:build_type])
  end

  desc "Run UI Test in Firebase Test Lab"
  lane :instrumentation_tests_testlab do |options|
    #assemble_test_application
    assemble_build(build_flavor:options[:build_flavor], build_type:"Debug")
    @app_apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

    assemble_build(build_flavor:options[:build_flavor] + "Debug", build_type:"AndroidTest")
    @android_test_apk = Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]

    run_tests_firebase_testlab(
        project_id: "sampleappcicd",
        #app_apk: "app/build/outputs/apk/beta/debug/app-beta-debug.apk",
        #android_test_apk: "app/build/outputs/apk/androidTest/beta/debug/app-beta-debug-androidTest.apk",
        app_apk: @app_apk,
        android_test_apk: @android_test_apk,
        devices: [
            {
                model: "Nexus6P",
                version: "27"
            }
        ],
        delete_firebase_files: true
    )
    end

  desc "Deploy new version to store"
  lane :deploy_to_play_store do
    @build_type = "Release"
    assemble_build
    #upload_to_play_store
  end

  desc "Send Message to Slack"
  lane :send_to_slack do
    sh "../fastlane/send_to_slack.sh"
    #sh "curl -X POST --data '{\"text\":\"Hello, World!\"}' https://hooks.slack.com/services/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"
    #sh "curl -F token=xoxp-474526796610-473921783169-555578726836-5aa8b4ad476a130b89634de997c2fdf9 -F channels=CDYAFET1A -F file=@../app/build/outputs/apk/debug/app-debug.apk https://slack.com/api/files.upload"
  end

  desc "Send Apk to Slack"
  lane :send_apk_to_slack do |options|
    file_path = options[:apk_path]
    file_name = "File Name"
    sh "curl https://slack.com/api/files.upload -F token=\"xoxp-474526796610-473921783169-569292002371-90110c5e994a82f40efdae07038996a1\" \
        -F channels=\"CDYAFET1A\" -F title=\"" + file_name + "\" -F file=@" + file_path
  end

  desc "Beta Deployment"
  lane :beta do |options|
    assemble_build(build_flavor:"Beta", build_type:"Release")
    upload_to_play_store(
        track: 'beta',
        apk: Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    )
    crashlytics(
        apk_path:Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH],
        api_token:'aee4492cf369d809aef43858bff0ebe71598851b',
        build_secret:'f0ae8fb4562bc616993490b07f6020fd893759e771616704aca9bc8f035f333c'
    )
  end

  desc "Release Deployment"
  lane :release do |options|
    upload_to_play_store(
        apk: options[:apk_path]
    )
    crashlytics(
        apk_path:options[:apk_path],
        api_token:'aee4492cf369d809aef43858bff0ebe71598851b',
        build_secret:'f0ae8fb4562bc616993490b07f6020fd893759e771616704aca9bc8f035f333c'
    )
  end

  desc "Capture Screen"
  lane :capture_screen do
    assemble_build
    assemble_test_application
    screengrab
  end

end